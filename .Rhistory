merged3 <- merged2[c(8,9,1:2,4,6,10,3,5,7)]
merged3$question_date <- ymd_hms(merged3$question_date)
merged3$answer_date <- ymd_hms(merged3$answer_date)
dat <- merged3 %>% separate("question_date", into = c("date1","time1"), sep = " ") %>% separate("answer_date", into = c("date2","time2"), sep = " ")
dat$date1 <-
diff <- merged3 %>% mutate(diff = answer_date - question_date)
diff <- diff %>% mutate(relative = as.duration(diff)) %>% filter(diff > 0 )
dif <- diff %>% filter(diff < 1000)
#dif <- diff[,c(1:5,8,9,11,12)]%>% arrange(desc(question_id))
#loop <- unique(diff)
yote <- diff %>% mutate(sec = str_detect(relative, "s$"),min = str_detect(relative, "minute"),hour = str_detect(relative, "hour"), week = str_detect(relative, "week"),days = str_detect(relative, "day"), year = str_detect(relative, "year")) %>% arrange(-desc(diff))
s <- yote[c(1:45),]
m <- yote %>% filter(min == "TRUE") %>% mutate(min = diff/60) %>% arrange(desc(diff))
h <- yote %>% filter(hour == "TRUE")  %>% mutate(hour = diff/3600) %>% arrange(desc(diff))
d <- yote %>% filter(days == "TRUE")  %>% mutate(day = diff/(3600*24)) %>% arrange(desc(diff))
w <- yote %>% filter(week == "TRUE")  %>% mutate(week = diff/(3600*24*7)) %>% arrange(desc(diff))
y <- yote %>% filter(year == "TRUE")  %>% mutate(year = diff/(3600*24*365)) %>% arrange(desc(diff))
ggplot(data = m, mapping = aes(y = answer_score,x = min))+
geom_point() + ggtitle("min") + ylim(0,1000) +
ggtitle("Stackoverflow Threads: Timing of Response vs Answer Score") +
xlab("Response Time (min)") +
ylab("Answer Score")
ggplot(data = d, mapping = aes(y = answer_score,x = day))+
geom_point() + ggtitle("day")+ ylim(0,1000) +
ggtitle("Stackoverflow Threads: Timing of Response vs Answer Score") +
xlab("Response Time (days)") +
ylab("Answer Score")
ggplot(data = h, mapping = aes(y = answer_score,x = hour))+
geom_point() + ggtitle("hour") + ylim(0,1000)
ggplot(data = d, mapping = aes(y = answer_score,x = day))+
geom_point() + ggtitle("day")+ ylim(0,1000)
ggplot(data = w, mapping = aes(y = answer_score,x = week))+
geom_point() + ggtitle("week") + ylim(0,1000)
ggplot(data = y, mapping = aes(y = answer_score,x = year))+
geom_point() + ggtitle("year")+ ylim(0,110)
ggplot(data = s, mapping = aes(y = answer_score,x = diff))+
geom_point() + ggtitle("sec")
# stats try percentage of question answered within a minute, hour, day, week, year. and the amount of those
#ss <- s %>% summarize(score = mean(answer_score))
#mm <- m %>% summarize(score = mean(answer_score))
#hh <- h %>% summarize(score = mean(answer_score))
#dd <- d %>% summarize(score = mean(answer_score))
#ww <- w %>% summarize(score = mean(answer_score))
#yy <- y %>% summarize(score = mean(answer_score))
#sum(45,18801,9103,1511,2546,84)
stats <- tibble(
`Answered in...` = c("seconds","minutes","hours","days","weeks","years"),
amount = c(45,18801,9103,1511,2546,84),
percentage = c(45/32090,18801/32090,9103/32090,1511/32090,2546/32090,84/32090),
average_score = c(106,17.1,8.62,10.2,11.6,50.5),
`Score x Amount` = c(amount*average_score))
stats <- stats
stats
# find all of the quickest response times for the same question Id and put a column with rank. 1 = fastest
yeet <- yote %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers <- yeet[,c(1,19)] %>% rename("diff" = "quickest")
yaawt <- semi_join(yeet,jeepers) %>% mutate(rank = 1) %>% arrange(desc(question_id))
# filters out all the rank one rows so the new "rank 1" is actually rank 2
yeet2 <- anti_join(yeet,jeepers) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
# Ranks 2s
jeepers2 <- yeet2[,c(1,19)] %>% rename("diff" = "quickest")
yaawt2 <- semi_join(yeet2,jeepers2) %>% mutate(rank = 2) %>% arrange(desc(question_id))
# rank 3 filters out all ranks 2
yeet3 <- anti_join(yeet2,jeepers2) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers3 <- yeet3[,c(1,19)] %>% rename("diff" = "quickest")
yaawt3 <- semi_join(yeet3,jeepers3) %>% mutate(rank = 3) %>% arrange(desc(question_id))
# rank 4 filters out all ranks 3
yeet4 <- anti_join(yeet3,jeepers3) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers4 <- yeet4[,c(1,19)] %>% rename("diff" = "quickest")
yaawt4 <- semi_join(yeet4,jeepers4) %>% mutate(rank = 4) %>% arrange(desc(question_id))
# rank 5 filters out all ranks 4
yeet5 <- anti_join(yeet4,jeepers4) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers5 <- yeet5[,c(1,19)] %>% rename("diff" = "quickest")
yaawt5 <- semi_join(yeet5,jeepers5) %>% mutate(rank = 5) %>% arrange(desc(question_id))
ultimate_yeet <- full_join(yaawt,yaawt2) %>% full_join(.,yaawt3)%>% full_join(.,yaawt4)%>% full_join(.,yaawt5)
questionT<- merged3%>%
select(question_title,answer_score, question_score, question_date, answer_body)%>%
group_by(question_title, question_date, answer_body)%>%
summarise(avg_Qscore = mean(question_score), avg_Ascore = mean(answer_score))
titlesPython <- questionT%>%
filter(str_detect(question_title, "python"))
answerPython <- questionT%>%
filter(str_detect(answer_body, "python"))
# compares avg question score and answer score of quesition titles that are about python
ggplot(data = titlesPython, mapping = aes(x = avg_Qscore, y = avg_Ascore ))+
geom_point()+geom_smooth(method = lm)+
ggtitle("Question titles about python : Average question score vs. Average answer score")+
xlab("Average Answer Score")+
ylab("Average Question Score")
correlation1 <-cor(titlesPython$avg_Qscore, titlesPython$avg_Ascore )
correlation1
# compares avg quesiton score and answer score of anser titles that are about python
ggplot(data = answerPython, mapping = aes(x = avg_Qscore, y = avg_Ascore ))+
geom_point()+geom_smooth(method = lm)+
ggtitle("Answers about python: Average question score vs. Average answer score")+
xlab("Average Answer Score")+
ylab("Average Question Score")
correlation2 <- cor(answerPython$avg_Qscore, answerPython$avg_Ascore)
correlation2
gut <- merged3 %>% group_by(question_id) %>% mutate(ave = mean(answer_score)) %>% mutate(length = str_length(question_title)) %>% arrange(desc(ave))
get <- gut[,c(1,3,11,12)]  %>% unique()
got <- get %>% filter(length < 5000, ave > 0, ave < 25)
ggplot(data = get, mapping = aes(x = length, y = ave))+
geom_point() + ylab("Average Anwser Score ") + xlab("Character Length of Question") + ggtitle("Score Vs. Length")
polite <- merged3 %>%
mutate(polite_question = ifelse(str_detect(question_body, "[T|t]hank you") | str_detect(question_body, "[T|t]hanks") |
str_detect(question_body, "[P|p]lease") | str_detect(question_body, " [T|t]y "), "True", "False")) %>%
mutate(polite_answer = ifelse(str_detect(answer_body, "[T|t]hank you") | str_detect(answer_body, "[T|t]hanks") |
str_detect(answer_body, "[P|p]lease") | str_detect(answer_body, " [T|t]y "), "True", "False")) %>%
group_by(polite_answer, polite_question, question_id) %>%
summarise(avg_question_score = mean(question_score), avg_answer_score = mean(answer_score))
polite2 <- polite %>%
group_by(polite_answer, polite_question) %>% #Another group_by required to deal with repeated question id's as a result of joining datasets
summarise(avg_question_score = mean(avg_question_score), avg_answer_score = mean(avg_answer_score), count = n()) %>%
unite(`polite_answer + polite_question`, polite_answer, polite_question, sep = " + ")
polite3 <- polite2[c(1,3,2,4)]
ggplot(data = polite3) +
geom_point(mapping = aes(x = `polite_answer + polite_question`, y = avg_question_score, size = count), color = "blue") +
geom_point(mapping = aes(x = `polite_answer + polite_question`, y = avg_answer_score, size = count), color = "green") +
xlab("Polite Answer + Polite Question (True or False)") +
ylab("Average Score") +
ggtitle("Stackoverflow Threads: Politeness vs. Question/Answer Score", subtitle = "Blue = Question Score; Green = Answer Score")
#get average score for each string length
boi <- merged3 %>%
group_by( str_length(answer_body)) %>%
summarize(ave = mean(answer_score))
#got rid of some outliers messing up my graph >:(
boi1 <- boi %>%
filter(ave < 750, `str_length(answer_body)` < 7500 )
#graph
ggplot(data = boi1, mapping = aes(x= `str_length(answer_body)`, y= ave)) +
geom_point( alpha = 1/10) +
geom_smooth( method='lm')
#make new column with count for the amount of "neat" words in each question body
merged4 <- merged3 %>%
mutate(neat_count= str_count(question_body, c("neat", "neato","nice","noice")))
#get average score for each neat count
merged7 <-merged4 %>%
filter(neat_count < 3) %>% #neat count of 3 only happens once so it skews data
group_by( neat_count) %>%
summarize(ave = mean(question_score))
merged8 <-merged4 %>%
group_by( neat_count) %>%
summarize(s = sum(question_score))
#graph
ggplot(data = merged7, mapping = aes(x = neat_count, y = ave)) +
geom_point() +
geom_smooth( method='lm')
# find all of the quickest response times for the same question Id and put a column with rank. 1 = fastest
yeet <- yote %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers <- yeet[,c(1,19)] %>% rename("diff" = "quickest")
yaawt <- semi_join(yeet,jeepers) %>% mutate(rank = 1) %>% arrange(desc(question_id))
# filters out all the rank one rows so the new "rank 1" is actually rank 2
yeet2 <- anti_join(yeet,jeepers) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
# Ranks 2s
jeepers2 <- yeet2[,c(1,19)] %>% rename("diff" = "quickest")
yaawt2 <- semi_join(yeet2,jeepers2) %>% mutate(rank = 2) %>% arrange(desc(question_id))
# rank 3 filters out all ranks 2
yeet3 <- anti_join(yeet2,jeepers2) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers3 <- yeet3[,c(1,19)] %>% rename("diff" = "quickest")
yaawt3 <- semi_join(yeet3,jeepers3) %>% mutate(rank = 3) %>% arrange(desc(question_id))
# rank 4 filters out all ranks 3
yeet4 <- anti_join(yeet3,jeepers3) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers4 <- yeet4[,c(1,19)] %>% rename("diff" = "quickest")
yaawt4 <- semi_join(yeet4,jeepers4) %>% mutate(rank = 4) %>% arrange(desc(question_id))
# rank 5 filters out all ranks 4
yeet5 <- anti_join(yeet4,jeepers4) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers5 <- yeet5[,c(1,19)] %>% rename("diff" = "quickest")
yaawt5 <- semi_join(yeet5,jeepers5) %>% mutate(rank = 5) %>% arrange(desc(question_id))
ultimate_yeet <- full_join(yaawt,yaawt2) %>% full_join(.,yaawt3)%>% full_join(.,yaawt4)%>% full_join(.,yaawt5)
View(ultimate_yeet)
ggplot(data = ulimate_yeet, mapping = aes(x = rank))+
geom_density()
ggplot(data = ultimate_yeet, mapping = aes(x = rank))+
geom_density()
# find all of the quickest response times for the same question Id and put a column with rank. 1 = fastest
yeet <- yote %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers <- yeet[,c(1,19)] %>% rename("diff" = "quickest")
yaawt <- semi_join(yeet,jeepers) %>% mutate(rank = 1) %>% arrange(desc(question_id))
# filters out all the rank one rows so the new "rank 1" is actually rank 2
yeet2 <- anti_join(yeet,jeepers) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
# Ranks 2s
jeepers2 <- yeet2[,c(1,19)] %>% rename("diff" = "quickest")
yaawt2 <- semi_join(yeet2,jeepers2) %>% mutate(rank = 2) %>% arrange(desc(question_id))
# rank 3 filters out all ranks 2
yeet3 <- anti_join(yeet2,jeepers2) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers3 <- yeet3[,c(1,19)] %>% rename("diff" = "quickest")
yaawt3 <- semi_join(yeet3,jeepers3) %>% mutate(rank = 3) %>% arrange(desc(question_id))
# rank 4 filters out all ranks 3
yeet4 <- anti_join(yeet3,jeepers3) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers4 <- yeet4[,c(1,19)] %>% rename("diff" = "quickest")
yaawt4 <- semi_join(yeet4,jeepers4) %>% mutate(rank = 4) %>% arrange(desc(question_id))
# rank 5 filters out all ranks 4
yeet5 <- anti_join(yeet4,jeepers4) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers5 <- yeet5[,c(1,19)] %>% rename("diff" = "quickest")
yaawt5 <- semi_join(yeet5,jeepers5) %>% mutate(rank = 5) %>% arrange(desc(question_id))
# rank 6 filters out all ranks 5
yeet6 <- anti_join(yeet5,jeepers5) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers6 <- yeet6[,c(1,19)] %>% rename("diff" = "quickest")
yaawt6 <- semi_join(yeet6,jeepers6) %>% mutate(rank = 5) %>% arrange(desc(question_id))
ultimate_yeet <- full_join(yaawt,yaawt2) %>% full_join(.,yaawt3)%>% full_join(.,yaawt4)%>% full_join(.,yaawt5) %>% full_join(.,yaawt5)
ggplot(data = ultimate_yeet, mapping = aes(x = rank))+
geom_density()
ultimate_yeet <- full_join(yaawt,yaawt2) %>% full_join(.,yaawt3)%>% full_join(.,yaawt4)%>% full_join(.,yaawt5) %>% full_join(.,yaawt6)
ultimate_yeet <- full_join(yaawt,yaawt2) %>% full_join(.,yaawt3)%>% full_join(.,yaawt4)%>% full_join(.,yaawt5) %>% full_join(.,yaawt6)
ggplot(data = ultimate_yeet, mapping = aes(x = rank))+
geom_density()
# find all of the quickest response times for the same question Id and put a column with rank. 1 = fastest
yeet <- yote %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers <- yeet[,c(1,19)] %>% rename("diff" = "quickest")
yaawt <- semi_join(yeet,jeepers) %>% mutate(rank = 1) %>% arrange(desc(question_id))
# filters out all the rank one rows so the new "rank 1" is actually rank 2
yeet2 <- anti_join(yeet,jeepers) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
# Ranks 2s
jeepers2 <- yeet2[,c(1,19)] %>% rename("diff" = "quickest")
yaawt2 <- semi_join(yeet2,jeepers2) %>% mutate(rank = 2) %>% arrange(desc(question_id))
# rank 3 filters out all ranks 2
yeet3 <- anti_join(yeet2,jeepers2) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers3 <- yeet3[,c(1,19)] %>% rename("diff" = "quickest")
yaawt3 <- semi_join(yeet3,jeepers3) %>% mutate(rank = 3) %>% arrange(desc(question_id))
# rank 4 filters out all ranks 3
yeet4 <- anti_join(yeet3,jeepers3) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers4 <- yeet4[,c(1,19)] %>% rename("diff" = "quickest")
yaawt4 <- semi_join(yeet4,jeepers4) %>% mutate(rank = 4) %>% arrange(desc(question_id))
# rank 5 filters out all ranks 4
yeet5 <- anti_join(yeet4,jeepers4) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers5 <- yeet5[,c(1,19)] %>% rename("diff" = "quickest")
yaawt5 <- semi_join(yeet5,jeepers5) %>% mutate(rank = 5) %>% arrange(desc(question_id))
# rank 6 filters out all ranks 5
yeet6 <- anti_join(yeet5,jeepers5) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers6 <- yeet6[,c(1,19)] %>% rename("diff" = "quickest")
yaawt6 <- semi_join(yeet6,jeepers6) %>% mutate(rank = 6) %>% arrange(desc(question_id))
ultimate_yeet <- full_join(yaawt,yaawt2) %>% full_join(.,yaawt3)%>% full_join(.,yaawt4)%>% full_join(.,yaawt5) %>% full_join(.,yaawt6)
ggplot(data = ultimate_yeet, mapping = aes(x = rank))+
geom_density()
ggplot(data = ultimate_yeet, mapping = aes(x = rank))+
geom_density() + ggtitle("Distribution of Rank","Rank 'n' = nth responder")
ggplot(data = ultimate_yeet, mapping = aes(x = rank))+
geom_density() + ggtitle("Distribution of Rank","Rank 'n' = nth responder")
ggplot(data = ultimate_yeet, mapping = aes(x = score))+
geom_density()
ggplot(data = ultimate_yeet, mapping = aes(x = rank))+
geom_density() + ggtitle("Distribution of Rank","Rank 'n' = nth responder")
ggplot(data = ultimate_yeet, mapping = aes(x = answer_score))+
geom_density()
ggplot(data = ultimate_yeet, mapping = aes(x = rank))+
geom_density() + ggtitle("Distribution of Rank","Rank 'n' = nth responder")
ggplot(data = ultimate_yeet, mapping = aes(x = answer_score))+
geom_density() +
facet_wrap(.~rank)
ggplot(data = ultimate_yeet, mapping = aes(x = rank))+
geom_density() + ggtitle("Distribution of Rank","Rank 'n' = nth responder")
ggplot(data = ultimate_yeet, mapping = aes(x = answer_score))+
geom_density() +
facet_wrap(.~rank) + xlim(0,1000)
ggplot(data = ultimate_yeet, mapping = aes(x = rank))+
geom_density() + ggtitle("Distribution of Rank","Rank 'n' = nth responder")
ggplot(data = ultimate_yeet, mapping = aes(x = answer_score))+
geom_density() +
facet_wrap(.~rank) + xlim(0,100)
zoinks <- yote %>% group_by(question_id) %>% mutate(highscore = max(answer_score)) %>% arrange(desc(question_id))
View(zoinks)
View(jeepers)
View(ultimate_yeet)
zoinks <- yote %>% group_by(question_id) %>% mutate(highscore = max(answer_score)) %>% arrange(desc(question_id))
shaggy <- ultimate_yeet[,c(1,20)]
zoinks <- yote %>% group_by(question_id) %>% mutate(highscore = max(answer_score)) %>% arrange(desc(question_id))
shaggy <- zoinks[,c(1,19)] %>% rename("question_score" = "highscore")
View(shaggy)
zoinks <- yote %>% group_by(question_id) %>% mutate(highscore = max(answer_score)) %>% arrange(desc(question_id))
shaggy <- zoinks[,c(1,19)] %>% rename("question_score" = "highscore")
semi_join(zoinks,ultimate_yeet)
zoinks <- yote %>% group_by(question_id) %>% mutate(highscore = max(answer_score)) %>% arrange(desc(question_id))
shaggy <- zoinks[,c(1,19)] %>% rename("question_score" = "highscore")
ayy <- semi_join(zoinks,ultimate_yeet)
View(ayy)
zoinks <- yote %>% group_by(question_id) %>% mutate(highscore = max(answer_score)) %>% arrange(desc(question_id))
shaggy <- zoinks[,c(1,19)] %>% rename("question_score" = "highscore")
ayy <- full_join(zoinks,ultimate_yeet)
zoinks <- yote %>% group_by(question_id) %>% mutate(highscore = max(answer_score)) %>% arrange(desc(question_id))
shaggy <- zoinks[,c(1,19)] %>% rename("question_score" = "highscore")
ayy <- semi_join(shaggy,ultimate_yeet)
View(ayy)
ultimate_yeet <- ultimate_yeet %>% arrange(desc(question_id))
zoinks <- yote %>% group_by(question_id) %>% mutate(highscore = max(answer_score)) %>% arrange(desc(question_id))
shaggy <- zoinks[,c(1,19)] %>% rename("question_score" = "highscore")
ayy <- semi_join(shaggy,ultimate_yeet)
View(ayy)
View(ayy)
ultimate_yeet <- ultimate_yeet %>% arrange(desc(question_id))
zoinks <- yote %>% group_by(question_id) %>% mutate(highscore = max(answer_score)) %>% arrange(desc(question_id))
shaggy <- zoinks[,c(1,19)] %>% rename("question_score" = "highscore")
ayy <- semi_join(shaggy,zoinks)
ultimate_yeet <- ultimate_yeet %>% arrange(desc(question_id))
zoinks <- yote %>% group_by(question_id) %>% mutate(highscore = max(answer_score)) %>% arrange(desc(question_id))
shaggy <- zoinks[,c(1,19)] %>% rename("question_score" = "highscore")
hawye <- semi_join(zoinks,shaggy) %>% arrange(desc(question_id))
View(hawye)
ultimate_yeet <- ultimate_yeet %>% arrange(desc(question_id))
zoinks <- yote %>% group_by(question_id) %>% mutate(highscore = max(answer_score)) %>% arrange(desc(question_id))
shaggy <- zoinks[,c(1,19)] %>% rename("answer_score" = "highscore")
hawye <- semi_join(zoinks,shaggy) %>% arrange(desc(question_id))
ultimate_yeet <- ultimate_yeet %>% arrange(desc(question_id))
zoinks <- yote %>% group_by(question_id) %>% mutate(highscore = max(answer_score)) %>% arrange(desc(question_id))
shaggy <- zoinks[,c(1,19)] %>% rename("answer_score" = "highscore")
hawye <- semi_join(zoinks,shaggy) %>% arrange(desc(question_id))
force <- full_join(hawye, ultimate_yeet)
View(force)
ultimate_yeet <- ultimate_yeet %>% arrange(desc(question_id))
zoinks <- yote %>% group_by(question_id) %>% mutate(highscore = max(answer_score)) %>% arrange(desc(question_id))
shaggy <- zoinks[,c(1,19)] %>% rename("answer_score" = "highscore")
hawye <- semi_join(zoinks,shaggy) %>% arrange(desc(question_id))
force <- semi_join(hawye, ultimate_yeet)
ultimate_yeet <- ultimate_yeet %>% arrange(desc(question_id))
zoinks <- yote %>% group_by(question_id) %>% mutate(highscore = max(answer_score)) %>% arrange(desc(question_id))
shaggy <- zoinks[,c(1,19)] %>% rename("answer_score" = "highscore")
hawye <- semi_join(zoinks,shaggy) %>% arrange(desc(question_id))
force <- semi_join(ultimate_yeet,hawye)
library(tidyverse)
library(lubridate)
library(stringr)
library(data.table)
Questions <- read.csv("Questions_trunc.csv")
Answers <- read.csv("answers_trunc.csv")
# merged <- left_join(Questions, Answers, by = c("Id" = "ParentId")) as NAs in date set
merged <- inner_join(Questions, Answers, by = c("Id" = "ParentId"))
merged2 <- merged %>%
mutate(question_title = Title, question_date = CreationDate.x, answer_date = CreationDate.y,
question_score = Score.x, answer_score = Score.y,
question_body = Body.x, answer_body = Body.y,
question_id = Id, question_asker_id = OwnerUserId.x, question_answerer_id = OwnerUserId.y) %>%
select(-CreationDate.x, -CreationDate.y, -Score.x, -Score.y, -Body.x, -Body.y, -Id, -X.x, -X.y, -Id.y, -OwnerUserId.x, -OwnerUserId.y, -Title)
merged3 <- merged2[c(8,9,1:2,4,6,10,3,5,7)]
merged3$question_date <- ymd_hms(merged3$question_date)
merged3$answer_date <- ymd_hms(merged3$answer_date)
dat <- merged3 %>% separate("question_date", into = c("date1","time1"), sep = " ") %>% separate("answer_date", into = c("date2","time2"), sep = " ")
dat$date1 <-
diff <- merged3 %>% mutate(diff = answer_date - question_date)
diff <- diff %>% mutate(relative = as.duration(diff)) %>% filter(diff > 0 )
dif <- diff %>% filter(diff < 1000)
#dif <- diff[,c(1:5,8,9,11,12)]%>% arrange(desc(question_id))
#loop <- unique(diff)
yote <- diff %>% mutate(sec = str_detect(relative, "s$"),min = str_detect(relative, "minute"),hour = str_detect(relative, "hour"), week = str_detect(relative, "week"),days = str_detect(relative, "day"), year = str_detect(relative, "year")) %>% arrange(-desc(diff))
s <- yote[c(1:45),]
m <- yote %>% filter(min == "TRUE") %>% mutate(min = diff/60) %>% arrange(desc(diff))
h <- yote %>% filter(hour == "TRUE")  %>% mutate(hour = diff/3600) %>% arrange(desc(diff))
d <- yote %>% filter(days == "TRUE")  %>% mutate(day = diff/(3600*24)) %>% arrange(desc(diff))
w <- yote %>% filter(week == "TRUE")  %>% mutate(week = diff/(3600*24*7)) %>% arrange(desc(diff))
y <- yote %>% filter(year == "TRUE")  %>% mutate(year = diff/(3600*24*365)) %>% arrange(desc(diff))
ggplot(data = m, mapping = aes(y = answer_score,x = min))+
geom_point() + ggtitle("min") + ylim(0,1000) +
ggtitle("Stackoverflow Threads: Timing of Response vs Answer Score") +
xlab("Response Time (min)") +
ylab("Answer Score")
ggplot(data = d, mapping = aes(y = answer_score,x = day))+
geom_point() + ggtitle("day")+ ylim(0,1000) +
ggtitle("Stackoverflow Threads: Timing of Response vs Answer Score") +
xlab("Response Time (days)") +
ylab("Answer Score")
ggplot(data = h, mapping = aes(y = answer_score,x = hour))+
geom_point() + ggtitle("hour") + ylim(0,1000)
ggplot(data = d, mapping = aes(y = answer_score,x = day))+
geom_point() + ggtitle("day")+ ylim(0,1000)
ggplot(data = w, mapping = aes(y = answer_score,x = week))+
geom_point() + ggtitle("week") + ylim(0,1000)
ggplot(data = y, mapping = aes(y = answer_score,x = year))+
geom_point() + ggtitle("year")+ ylim(0,110)
ggplot(data = s, mapping = aes(y = answer_score,x = diff))+
geom_point() + ggtitle("sec")
# stats try percentage of question answered within a minute, hour, day, week, year. and the amount of those
#ss <- s %>% summarize(score = mean(answer_score))
#mm <- m %>% summarize(score = mean(answer_score))
#hh <- h %>% summarize(score = mean(answer_score))
#dd <- d %>% summarize(score = mean(answer_score))
#ww <- w %>% summarize(score = mean(answer_score))
#yy <- y %>% summarize(score = mean(answer_score))
#sum(45,18801,9103,1511,2546,84)
stats <- tibble(
`Answered in...` = c("seconds","minutes","hours","days","weeks","years"),
amount = c(45,18801,9103,1511,2546,84),
percentage = c(45/32090,18801/32090,9103/32090,1511/32090,2546/32090,84/32090),
average_score = c(106,17.1,8.62,10.2,11.6,50.5),
`Score x Amount` = c(amount*average_score))
stats <- stats
stats
# find all of the quickest response times for the same question Id and put a column with rank. 1 = fastest
yeet <- yote %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers <- yeet[,c(1,19)] %>% rename("diff" = "quickest")
yaawt <- semi_join(yeet,jeepers) %>% mutate(rank = 1) %>% arrange(desc(question_id))
# filters out all the rank one rows so the new "rank 1" is actually rank 2
yeet2 <- anti_join(yeet,jeepers) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
# Ranks 2s
jeepers2 <- yeet2[,c(1,19)] %>% rename("diff" = "quickest")
yaawt2 <- semi_join(yeet2,jeepers2) %>% mutate(rank = 2) %>% arrange(desc(question_id))
# rank 3 filters out all ranks 2
yeet3 <- anti_join(yeet2,jeepers2) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers3 <- yeet3[,c(1,19)] %>% rename("diff" = "quickest")
yaawt3 <- semi_join(yeet3,jeepers3) %>% mutate(rank = 3) %>% arrange(desc(question_id))
# rank 4 filters out all ranks 3
yeet4 <- anti_join(yeet3,jeepers3) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers4 <- yeet4[,c(1,19)] %>% rename("diff" = "quickest")
yaawt4 <- semi_join(yeet4,jeepers4) %>% mutate(rank = 4) %>% arrange(desc(question_id))
# rank 5 filters out all ranks 4
yeet5 <- anti_join(yeet4,jeepers4) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers5 <- yeet5[,c(1,19)] %>% rename("diff" = "quickest")
yaawt5 <- semi_join(yeet5,jeepers5) %>% mutate(rank = 5) %>% arrange(desc(question_id))
# rank 6 filters out all ranks 5
yeet6 <- anti_join(yeet5,jeepers5) %>% group_by(question_id) %>% mutate(quickest = min(diff)) %>% arrange(desc(question_id))
jeepers6 <- yeet6[,c(1,19)] %>% rename("diff" = "quickest")
yaawt6 <- semi_join(yeet6,jeepers6) %>% mutate(rank = 6) %>% arrange(desc(question_id))
ultimate_yeet <- full_join(yaawt,yaawt2) %>% full_join(.,yaawt3)%>% full_join(.,yaawt4)%>% full_join(.,yaawt5) %>% full_join(.,yaawt6)
ggplot(data = ultimate_yeet, mapping = aes(x = rank))+
geom_density() + ggtitle("Distribution of Rank","Rank 'n' = nth responder")
ultimate_yeet <- ultimate_yeet %>% arrange(desc(question_id))
zoinks <- yote %>% group_by(question_id) %>% mutate(highscore = max(answer_score)) %>% arrange(desc(question_id))
shaggy <- zoinks[,c(1,19)] %>% rename("answer_score" = "highscore")
hawye <- semi_join(zoinks,shaggy) %>% arrange(desc(question_id))
#data below shows the rank for the answer with the highest answer score
force <- semi_join(ultimate_yeet,hawye)
questionT<- merged3%>%
select(question_title,answer_score, question_score, question_date, answer_body)%>%
group_by(question_title, question_date, answer_body)%>%
summarise(avg_Qscore = mean(question_score), avg_Ascore = mean(answer_score))
titlesPython <- questionT%>%
filter(str_detect(question_title, "python"))
answerPython <- questionT%>%
filter(str_detect(answer_body, "python"))
# compares avg question score and answer score of quesition titles that are about python
ggplot(data = titlesPython, mapping = aes(x = avg_Qscore, y = avg_Ascore ))+
geom_point()+geom_smooth(method = lm)+
ggtitle("Question titles about python : Average question score vs. Average answer score")+
xlab("Average Answer Score")+
ylab("Average Question Score")
correlation1 <-cor(titlesPython$avg_Qscore, titlesPython$avg_Ascore )
correlation1
# compares avg quesiton score and answer score of anser titles that are about python
ggplot(data = answerPython, mapping = aes(x = avg_Qscore, y = avg_Ascore ))+
geom_point()+geom_smooth(method = lm)+
ggtitle("Answers about python: Average question score vs. Average answer score")+
xlab("Average Answer Score")+
ylab("Average Question Score")
correlation2 <- cor(answerPython$avg_Qscore, answerPython$avg_Ascore)
correlation2
gut <- merged3 %>% group_by(question_id) %>% mutate(ave = mean(answer_score)) %>% mutate(length = str_length(question_title)) %>% arrange(desc(ave))
get <- gut[,c(1,3,11,12)]  %>% unique()
got <- get %>% filter(length < 5000, ave > 0, ave < 25)
ggplot(data = get, mapping = aes(x = length, y = ave))+
geom_point() + ylab("Average Anwser Score ") + xlab("Character Length of Question") + ggtitle("Score Vs. Length")
polite <- merged3 %>%
mutate(polite_question = ifelse(str_detect(question_body, "[T|t]hank you") | str_detect(question_body, "[T|t]hanks") |
str_detect(question_body, "[P|p]lease") | str_detect(question_body, " [T|t]y "), "True", "False")) %>%
mutate(polite_answer = ifelse(str_detect(answer_body, "[T|t]hank you") | str_detect(answer_body, "[T|t]hanks") |
str_detect(answer_body, "[P|p]lease") | str_detect(answer_body, " [T|t]y "), "True", "False")) %>%
group_by(polite_answer, polite_question, question_id) %>%
summarise(avg_question_score = mean(question_score), avg_answer_score = mean(answer_score))
polite2 <- polite %>%
group_by(polite_answer, polite_question) %>% #Another group_by required to deal with repeated question id's as a result of joining datasets
summarise(avg_question_score = mean(avg_question_score), avg_answer_score = mean(avg_answer_score), count = n()) %>%
unite(`polite_answer + polite_question`, polite_answer, polite_question, sep = " + ")
polite3 <- polite2[c(1,3,2,4)]
ggplot(data = polite3) +
geom_point(mapping = aes(x = `polite_answer + polite_question`, y = avg_question_score, size = count), color = "blue") +
geom_point(mapping = aes(x = `polite_answer + polite_question`, y = avg_answer_score, size = count), color = "green") +
xlab("Polite Answer + Polite Question (True or False)") +
ylab("Average Score") +
ggtitle("Stackoverflow Threads: Politeness vs. Question/Answer Score", subtitle = "Blue = Question Score; Green = Answer Score")
#get average score for each string length
boi <- merged3 %>%
group_by( str_length(answer_body)) %>%
summarize(ave = mean(answer_score))
#got rid of some outliers messing up my graph >:(
boi1 <- boi %>%
filter(ave < 750, `str_length(answer_body)` < 7500 )
#graph
ggplot(data = boi1, mapping = aes(x= `str_length(answer_body)`, y= ave)) +
geom_point( alpha = 1/10) +
geom_smooth( method='lm')
#make new column with count for the amount of "neat" words in each question body
merged4 <- merged3 %>%
mutate(neat_count= str_count(question_body, c("neat", "neato","nice","noice")))
#get average score for each neat count
merged7 <-merged4 %>%
filter(neat_count < 3) %>% #neat count of 3 only happens once so it skews data
group_by( neat_count) %>%
summarize(ave = mean(question_score))
merged8 <-merged4 %>%
group_by( neat_count) %>%
summarize(s = sum(question_score))
#graph
ggplot(data = merged7, mapping = aes(x = neat_count, y = ave)) +
geom_point() +
geom_smooth( method='lm')
ggplot(data = force, mapping = aes(x = rank))+
geom_density()
View(force)
ggplot(data = force, mapping = aes(x = rank))+
geom_density()
v <- force %>% group_by(rank) %>% count()
ggplot(data = force, mapping = aes(x = rank))+
geom_density()
force %>% group_by(rank) %>% count()
ggplot(data = force, mapping = aes(x = rank))+
geom_density()
force %>% group_by(rank) %>% count()
ggplot(data = force, mapping = aes(x = rank))+
geom_density() + ggtitle("Rank Desnity of Highest Answer Score","Rank 'n' = nth responder"))
force %>% group_by(rank) %>% count()
ggplot(data = force, mapping = aes(x = rank))+
geom_density() + ggtitle("Rank Desnity of Highest Answer Score","Rank 'n' = nth responder")
force %>% group_by(rank) %>% count()
ggplot(data = force, mapping = aes(x = rank))+
geom_density() + ggtitle("Rank Distribution for Highest Answer Score","Rank 'n' = nth responder")
